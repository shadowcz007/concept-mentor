import { useState, useRef, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { 
  BookOpen, 
  Send, 
  Lightbulb, 
  CheckCircle, 
  XCircle, 
  RotateCcw,
  Brain,
  Target,
  TrendingUp,
  Settings
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { ApiService } from "@/services/api";

interface LearningInterfaceProps {
  settings: { model: string };
  onSettingsClick: () => void;
}

interface Question {
  id: string;
  question: string;
  options?: string[];
  correctAnswer: string;
  type: 'multiple-choice' | 'fill-in-blank' | 'short-answer';
}

interface LearningRecord {
  topic: string;
  score: number;
  timestamp: Date;
}

const LearningInterface = ({ settings, onSettingsClick }: LearningInterfaceProps) => {
  const [currentTopic, setCurrentTopic] = useState("");
  const [explanation, setExplanation] = useState("");
  const [questions, setQuestions] = useState<Question[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [userAnswer, setUserAnswer] = useState("");
  const [selectedOption, setSelectedOption] = useState("");
  const [showFeedback, setShowFeedback] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);
  const [feedback, setFeedback] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [learningRecords, setLearningRecords] = useState<LearningRecord[]>([]);
  const [stage, setStage] = useState<'input' | 'explanation' | 'quiz' | 'complete'>('input');
  const { toast } = useToast();

  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [explanation, questions, showFeedback]);

  const callAI = async (messages: any[]) => {
    return ApiService.chatCompletion({
      model: settings.model,
      messages: messages,
      temperature: 0.7,
      max_tokens: 2000
    });
  };

  const handleTopicSubmit = async () => {
    if (!currentTopic.trim()) {
      toast({
        title: "ËØ∑ËæìÂÖ•Â≠¶‰π†‰∏ªÈ¢ò",
        description: "ÂëäËØâÊàëÊÇ®ÊÉ≥Â≠¶‰π†‰ªÄ‰πà",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    try {
      const messages = [
        {
          role: "system",
          content: "You are an excellent AI tutor who excels at explaining complex concepts in simple terms. Please explain the user's concept in clear and concise English, ensuring high school or college students can understand. Your explanation should include: 1) üìö Basic definition 2) üí° Simple explanation 3) üéØ A vivid example. Keep your response within 300 words and use appropriate emojis to make it engaging and easy to follow. Make the explanation fun and memorable!"
        },
        {
          role: "user",
          content: `Please explain this concept: ${currentTopic}`
        }
      ];

      const response = await callAI(messages);
      setExplanation(response);
      setStage('explanation');
    } catch (error) {
      toast({
        title: "Ëß£ÈáäÁîüÊàêÂ§±Ë¥•",
        description: "ËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÂíåAPIËÆæÁΩÆ",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const generateQuestions = async () => {
    setIsLoading(true);
    try {
      const messages = [
        {
          role: "system",
          content: `‰Ω†ÊòØ‰∏Ä‰∏™AIÈ¢òÁõÆÁîüÊàêÂô®„ÄÇÊ†πÊçÆÁî®Êà∑Â≠¶‰π†ÁöÑÊ¶ÇÂøµ"${currentTopic}"ÔºåÁîüÊàê2ÈÅìÁªÉ‰π†È¢ò„ÄÇËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãJSONÊ†ºÂºèÂõûÂ§çÔºå‰∏çË¶ÅÊ∑ªÂä†‰ªª‰ΩïÂÖ∂‰ªñÂÜÖÂÆπÔºö

[
  {
    "id": "1",
    "question": "È¢òÁõÆÂÜÖÂÆπ",
    "type": "multiple-choice",
    "options": ["ÈÄâÈ°πA", "ÈÄâÈ°πB", "ÈÄâÈ°πC", "ÈÄâÈ°πD"],
    "correctAnswer": "Ê≠£Á°ÆÁ≠îÊ°à"
  },
  {
    "id": "2", 
    "question": "È¢òÁõÆÂÜÖÂÆπ",
    "type": "short-answer",
    "correctAnswer": "ÂèÇËÄÉÁ≠îÊ°à"
  }
]

Á°Æ‰øùÈ¢òÁõÆÈöæÂ∫¶ÈÄÇ‰∏≠ÔºåËÉΩÂ§üÊ£ÄÈ™åÂ≠¶ÁîüÂØπÊ¶ÇÂøµÁöÑÁêÜËß£„ÄÇ`
        },
        {
          role: "user",
          content: `‰∏∫"${currentTopic}"ÁîüÊàêÁªÉ‰π†È¢ò`
        }
      ];

      const response = await callAI(messages);
      
      try {
        const generatedQuestions = JSON.parse(response);
        setQuestions(generatedQuestions);
        setCurrentQuestionIndex(0);
        setStage('quiz');
      } catch (parseError) {
        console.error('JSONËß£ÊûêÂ§±Ë¥•:', response);
        toast({
          title: "È¢òÁõÆÁîüÊàêÂ§±Ë¥•",
          description: "AIÂõûÂ§çÊ†ºÂºèÈîôËØØÔºåËØ∑ÈáçËØï",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "È¢òÁõÆÁîüÊàêÂ§±Ë¥•",
        description: "ËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÂíåAPIËÆæÁΩÆ",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const submitAnswer = async () => {
    const currentQuestion = questions[currentQuestionIndex];
    const answer = currentQuestion.type === 'multiple-choice' ? selectedOption : userAnswer;

    if (!answer.trim()) {
      toast({
        title: "ËØ∑ÈÄâÊã©ÊàñËæìÂÖ•Á≠îÊ°à",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    try {
      const messages = [
        {
          role: "system",
          content: `‰Ω†ÊòØ‰∏Ä‰∏™AIËØÑÂàÜËÄÅÂ∏à„ÄÇËØ∑ËØÑ‰º∞Â≠¶ÁîüÁöÑÁ≠îÊ°àÊòØÂê¶Ê≠£Á°ÆÔºåÂπ∂ÁªôÂá∫ÁÆÄÊ¥ÅÁöÑÂèçÈ¶à„ÄÇ

È¢òÁõÆÔºö${currentQuestion.question}
Ê≠£Á°ÆÁ≠îÊ°àÔºö${currentQuestion.correctAnswer}
Â≠¶ÁîüÁ≠îÊ°àÔºö${answer}

ËØ∑ÊåâÁÖß‰ª•‰∏ãÊ†ºÂºèÂõûÂ§çÔºö
Ê≠£Á°ÆÊÄßÔºö[Ê≠£Á°Æ/ÈÉ®ÂàÜÊ≠£Á°Æ/ÈîôËØØ]
ÂèçÈ¶àÔºö[ÁÆÄÁü≠ÁöÑËß£ÊûêÂíåÂª∫ËÆÆÔºå50Â≠ó‰ª•ÂÜÖ]`
        },
        {
          role: "user",
          content: "ËØ∑ËØÑ‰º∞Ëøô‰∏™Á≠îÊ°à"
        }
      ];

      const response = await callAI(messages);
      const isAnswerCorrect = response.includes('Ê≠£Á°ÆÊÄßÔºöÊ≠£Á°Æ') || response.includes('Ê≠£Á°ÆÊÄßÔºöÈÉ®ÂàÜÊ≠£Á°Æ');
      
      setIsCorrect(isAnswerCorrect);
      setFeedback(response);
      setShowFeedback(true);
    } catch (error) {
      toast({
        title: "ËØÑÂàÜÂ§±Ë¥•",
        description: "ËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const nextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setShowFeedback(false);
      setUserAnswer("");
      setSelectedOption("");
    } else {
      // Â≠¶‰π†ÂÆåÊàê
      const correctAnswers = questions.filter((_, index) => index <= currentQuestionIndex).length;
      const score = Math.round((correctAnswers / questions.length) * 100);
      
      const record: LearningRecord = {
        topic: currentTopic,
        score: score,
        timestamp: new Date()
      };
      
      setLearningRecords(prev => [...prev, record]);
      setStage('complete');
      
      toast({
        title: "Â≠¶‰π†ÂÆåÊàêÔºÅ",
        description: `ÊÇ®ÁöÑÂæóÂàÜÔºö${score}ÂàÜ`,
      });
    }
  };

  const resetLearning = () => {
    setCurrentTopic("");
    setExplanation("");
    setQuestions([]);
    setCurrentQuestionIndex(0);
    setUserAnswer("");
    setSelectedOption("");
    setShowFeedback(false);
    setStage('input');
  };

  const renderCurrentStage = () => {
    switch (stage) {
      case 'input':
        return (
          <Card className="p-6 bg-gradient-card shadow-card border-0 animate-slide-up">
            <div className="space-y-4">
              <div className="flex items-center gap-2 text-xl font-semibold text-foreground">
                <BookOpen className="w-5 h-5 text-primary" />
                ‰ªäÂ§©ÊÉ≥Â≠¶‰π†‰ªÄ‰πàÔºü
              </div>
              <div className="space-y-4">
                <Input
                  placeholder="‰æãÂ¶ÇÔºöÂæÆÁßØÂàÜÂü∫Êú¨ÂÆöÁêÜ„ÄÅÁâõÈ°øÁ¨¨‰∫åÂÆöÂæã„ÄÅÈÄíÂΩíÁÆóÊ≥ï..."
                  value={currentTopic}
                  onChange={(e) => setCurrentTopic(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleTopicSubmit()}
                  className="text-base bg-background border-border"
                />
                <Button 
                  onClick={handleTopicSubmit}
                  disabled={isLoading}
                  variant="hero"
                  size="lg"
                  className="w-full"
                >
                  {isLoading ? (
                    <div className="animate-spin w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full" />
                  ) : (
                    <>
                      <Lightbulb className="w-4 h-4" />
                      ÂºÄÂßãÂ≠¶‰π†
                    </>
                  )}
                </Button>
              </div>
            </div>
          </Card>
        );

      case 'explanation':
        return (
          <div className="space-y-6">
            <Card className="p-6 bg-gradient-card shadow-card border-0 animate-slide-up">
              <div className="space-y-4">
                <div className="flex items-center gap-2">
                  <Brain className="w-5 h-5 text-primary" />
                  <h3 className="text-lg font-semibold text-foreground">{currentTopic}</h3>
                </div>
                <div className="prose prose-sm text-foreground whitespace-pre-wrap">
                  {explanation}
                </div>
              </div>
            </Card>
            
            <div className="flex gap-3">
              <Button onClick={generateQuestions} variant="hero" size="lg" className="flex-1">
                <Target className="w-4 h-4" />
                ÊàëÁêÜËß£‰∫ÜÔºåÂºÄÂßãÁªÉ‰π†
              </Button>
              <Button onClick={resetLearning} variant="outline" size="lg">
                <RotateCcw className="w-4 h-4" />
                ÈáçÊñ∞ÂºÄÂßã
              </Button>
            </div>
          </div>
        );

      case 'quiz':
        const currentQuestion = questions[currentQuestionIndex];
        if (!currentQuestion) return null;

        return (
          <div className="space-y-6">
            <Card className="p-6 bg-gradient-card shadow-card border-0">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <Badge variant="secondary" className="px-3 py-1">
                    È¢òÁõÆ {currentQuestionIndex + 1} / {questions.length}
                  </Badge>
                  <Progress value={((currentQuestionIndex + 1) / questions.length) * 100} className="flex-1 mx-4" />
                </div>
                
                <h3 className="text-lg font-medium text-foreground">{currentQuestion.question}</h3>

                {currentQuestion.type === 'multiple-choice' && currentQuestion.options ? (
                  <div className="space-y-2">
                    {currentQuestion.options.map((option, index) => (
                      <Button
                        key={index}
                        variant={selectedOption === option ? "default" : "outline"}
                        className="w-full justify-start text-left"
                        onClick={() => setSelectedOption(option)}
                        disabled={showFeedback}
                      >
                        {String.fromCharCode(65 + index)}. {option}
                      </Button>
                    ))}
                  </div>
                ) : (
                  <Textarea
                    placeholder="ËØ∑ËæìÂÖ•ÊÇ®ÁöÑÁ≠îÊ°à..."
                    value={userAnswer}
                    onChange={(e) => setUserAnswer(e.target.value)}
                    disabled={showFeedback}
                    className="bg-background border-border"
                  />
                )}

                {!showFeedback ? (
                  <Button 
                    onClick={submitAnswer}
                    disabled={isLoading}
                    variant="default"
                    size="lg"
                    className="w-full"
                  >
                    {isLoading ? (
                      <div className="animate-spin w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full" />
                    ) : (
                      <>
                        <Send className="w-4 h-4" />
                        Êèê‰∫§Á≠îÊ°à
                      </>
                    )}
                  </Button>
                ) : (
                  <div className="space-y-4">
                    <Card className={`p-4 border-0 ${isCorrect ? 'bg-success/10' : 'bg-destructive/10'}`}>
                      <div className="flex items-start gap-3">
                        {isCorrect ? (
                          <CheckCircle className="w-5 h-5 text-success mt-0.5" />
                        ) : (
                          <XCircle className="w-5 h-5 text-destructive mt-0.5" />
                        )}
                        <div className="space-y-2">
                          <p className="font-medium text-foreground">
                            {isCorrect ? "Á≠îÂØπ‰∫ÜÔºÅ" : "ÈúÄË¶ÅÂÜçÊÉ≥ÊÉ≥"}
                          </p>
                          <p className="text-sm text-muted-foreground whitespace-pre-wrap">
                            {feedback}
                          </p>
                        </div>
                      </div>
                    </Card>
                    
                    <Button onClick={nextQuestion} variant="hero" size="lg" className="w-full">
                      {currentQuestionIndex < questions.length - 1 ? "‰∏ã‰∏ÄÈ¢ò" : "ÂÆåÊàêÂ≠¶‰π†"}
                    </Button>
                  </div>
                )}
              </div>
            </Card>
          </div>
        );

      case 'complete':
        const latestRecord = learningRecords[learningRecords.length - 1];
        return (
          <div className="space-y-6">
            <Card className="p-8 bg-gradient-card shadow-card border-0 text-center animate-slide-up">
              <div className="space-y-4">
                <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-success text-success-foreground shadow-glow">
                  <TrendingUp className="w-8 h-8" />
                </div>
                <h2 className="text-2xl font-bold text-foreground">Â≠¶‰π†ÂÆåÊàêÔºÅ</h2>
                <div className="space-y-2">
                  <p className="text-lg text-foreground">‰∏ªÈ¢òÔºö{latestRecord?.topic}</p>
                  <p className="text-3xl font-bold text-primary">{latestRecord?.score}ÂàÜ</p>
                </div>
              </div>
            </Card>

            <Button onClick={resetLearning} variant="hero" size="xl" className="w-full">
              ÂºÄÂêØÊñ∞ÁöÑÂ≠¶‰π†
            </Button>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-bg">
      {/* Header */}
      <div className="sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b border-border">
        <div className="max-w-4xl mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-gradient-primary flex items-center justify-center shadow-soft">
              <Brain className="w-5 h-5 text-primary-foreground" />
            </div>
            <h1 className="text-xl font-bold text-foreground">AIÂØºÂ∏à</h1>
          </div>
          <Button variant="ghost" size="icon" onClick={onSettingsClick}>
            <Settings className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto p-4 pt-8">
        <div className="space-y-6">
          {renderCurrentStage()}
          
          {/* Learning Records */}
          {learningRecords.length > 0 && stage === 'input' && (
            <Card className="p-6 bg-gradient-card shadow-soft border-0">
              <h3 className="font-semibold text-foreground mb-4 flex items-center gap-2">
                <TrendingUp className="w-4 h-4 text-primary" />
                Â≠¶‰π†ËÆ∞ÂΩï
              </h3>
              <div className="space-y-2">
                {learningRecords.slice(-3).map((record, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-background rounded-lg">
                    <span className="text-sm text-foreground">{record.topic}</span>
                    <Badge variant={record.score >= 80 ? "default" : "secondary"}>
                      {record.score}ÂàÜ
                    </Badge>
                  </div>
                ))}
              </div>
            </Card>
          )}
        </div>
        <div ref={messagesEndRef} />
      </div>
    </div>
  );
};

export default LearningInterface;